// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package tmessage

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type MetricsType int64
const (
  MetricsType_CounterDefine MetricsType = 1
  MetricsType_Counter MetricsType = 2
  MetricsType_TimerDefine MetricsType = 3
  MetricsType_Timer MetricsType = 4
  MetricsType_GaugesDefine MetricsType = 5
  MetricsType_Gauges MetricsType = 6
)

func (p MetricsType) String() string {
  switch p {
  case MetricsType_CounterDefine: return "CounterDefine"
  case MetricsType_Counter: return "Counter"
  case MetricsType_TimerDefine: return "TimerDefine"
  case MetricsType_Timer: return "Timer"
  case MetricsType_GaugesDefine: return "GaugesDefine"
  case MetricsType_Gauges: return "Gauges"
  }
  return "<UNSET>"
}

func MetricsTypeFromString(s string) (MetricsType, error) {
  switch s {
  case "CounterDefine": return MetricsType_CounterDefine, nil 
  case "Counter": return MetricsType_Counter, nil 
  case "TimerDefine": return MetricsType_TimerDefine, nil 
  case "Timer": return MetricsType_Timer, nil 
  case "GaugesDefine": return MetricsType_GaugesDefine, nil 
  case "Gauges": return MetricsType_Gauges, nil 
  }
  return MetricsType(0), fmt.Errorf("not a valid MetricsType string")
}


func MetricsTypePtr(v MetricsType) *MetricsType { return &v }

func (p MetricsType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MetricsType) UnmarshalText(text []byte) error {
q, err := MetricsTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MetricsType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MetricsType(v)
return nil
}

func (p * MetricsType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - MetricsType
//  - Name
//  - Param
type TMessage struct {
  MetricsType MetricsType `thrift:"metrics_type,1" db:"metrics_type" json:"metrics_type"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Param map[string]string `thrift:"param,3" db:"param" json:"param"`
}

func NewTMessage() *TMessage {
  return &TMessage{}
}


func (p *TMessage) GetMetricsType() MetricsType {
  return p.MetricsType
}

func (p *TMessage) GetName() string {
  return p.Name
}

func (p *TMessage) GetParam() map[string]string {
  return p.Param
}
func (p *TMessage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMessage)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := MetricsType(v)
  p.MetricsType = temp
}
  return nil
}

func (p *TMessage)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TMessage)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Param =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.Param[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TMessage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMessage) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metrics_type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metrics_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.MetricsType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metrics_type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metrics_type: ", p), err) }
  return err
}

func (p *TMessage) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *TMessage) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("param", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:param: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Param)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Param {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:param: ", p), err) }
  return err
}

func (p *TMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMessage(%+v)", *p)
}

